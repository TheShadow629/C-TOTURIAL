
#include <iostream>
#include <vector>

std::vector<int> fibonacci(int n) {
    std::vector<int> fibSeries;

    if (n >= 1) {
        fibSeries.push_back(0);
    }
    if (n >= 2) {
        fibSeries.push_back(1);
    }

    for (int i = 2; i < n; ++i) {
        int num = fibSeries[i - 1] + fibSeries[i - 2];
        fibSeries.push_back(num);
    }

    return fibSeries;
}

int main() {
    int n = 7;
    std::vector<int> fibNumbers = fibonacci(n);

    std::cout << "Fibonacci series of " << n << " numbers: ";
    for (int i = 0; i < fibNumbers.size(); ++i) {
        std::cout << fibNumbers[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}
//
//In this program, the `fibonacci` function generates the Fibonacci series up to the given number `n` and returns the result as an STL vector.The vector `fibSeries` is initially populated with the first two Fibonacci numbers(0 and 1), and then the subsequent numbers are generated by adding the last two numbers in the series.
//
//In the `main` function, we call the `fibonacci` function with `n = 7` to get the first 7 Fibonacci numbers.We then iterate through the vector and print each number to the console.
//
//Output:
//```
//Fibonacci series of 7 numbers: 0 1 1 2 3 5 8
//```
//
//This program demonstrates a simple non - OO solution using only the STL vector object.